import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class StaffScreen extends Application {

    private Stage primaryStage;

    private ObservableList<String> appointments = FXCollections.observableArrayList();
    private ObservableList<String> feedbacks = FXCollections.observableArrayList();

    private final String APPOINTMENTS_FILE = "appointments.txt";
    private final String FEEDBACK_FILE = "feedback.txt";

    private ListView<String> listView;
    private TextField editField;
    private Button deleteBtn;
    private Button updateBtn;
    private Button backBtn;
    private Button logoutBtn;

    private enum ViewMode { NONE, APPOINTMENTS, FEEDBACK }

    private ViewMode currentView = ViewMode.NONE;

    private static String staffId;

    public static void setStaffId(String id) {
        staffId = id;
    }

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        primaryStage.setTitle("Student Counseling System - Staff Dashboard");

        loadAppointments();
        loadFeedback();

        StackPane root = new StackPane();
        Image bgImage = new Image("file:background2.jpg");  // Put your background image path here
        BackgroundImage bg = new BackgroundImage(bgImage, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT,
        BackgroundPosition.CENTER, new BackgroundSize(700, 500, false, false, false, false));
        root.setBackground(new Background(bg));

        VBox mainBox = new VBox(15);
        mainBox.setPadding(new Insets(20));
        mainBox.setAlignment(Pos.TOP_CENTER);
        mainBox.setMaxWidth(450);
        mainBox.setMaxHeight(450);
        mainBox.setStyle("-fx-background-color: rgba(255, 255, 255, 0.85); -fx-background-radius: 15;");

        Image logoImage = new Image("file:iium2.jpg");  
        ImageView logoView = new ImageView(logoImage);
        logoView.setFitHeight(80);
        logoView.setPreserveRatio(true);

        Text title = new Text("Staff Dashboard");
        title.setFont(Font.font("Tahoma", FontWeight.BOLD, 24));
        title.setFill(Color.DARKSLATEGRAY);

        Text welcomeText = new Text("Welcome " + staffId);
        welcomeText.setFont(Font.font("Tahoma", FontWeight.NORMAL, 18));
        welcomeText.setFill(Color.DARKSLATEGRAY);

        Button viewAppointmentsBtn = new Button("View Appointments");
        Button viewFeedbackBtn = new Button("View Feedback");

        HBox choiceBox = new HBox(20, viewAppointmentsBtn, viewFeedbackBtn);
        choiceBox.setAlignment(Pos.CENTER);

        listView = new ListView<>();
        listView.setPrefHeight(200);

        editField = new TextField();
        editField.setPromptText("Edit selected item here");

        deleteBtn = new Button("Delete");
        updateBtn = new Button("Update");
        backBtn = new Button("Back");
        logoutBtn = new Button("Logout");

        HBox actionBtnBox = new HBox(15, updateBtn, deleteBtn, backBtn, logoutBtn);
        actionBtnBox.setAlignment(Pos.CENTER);

        listView.setVisible(false);
        editField.setVisible(false);
        deleteBtn.setVisible(false);
        updateBtn.setVisible(false);
        backBtn.setVisible(false);

        mainBox.getChildren().addAll(logoView, title, welcomeText, choiceBox, listView, editField, actionBtnBox);
        root.getChildren().add(mainBox);

        viewAppointmentsBtn.setOnAction(e -> showAppointmentsView());
        viewFeedbackBtn.setOnAction(e -> showFeedbackView());

        backBtn.setOnAction(e -> {
            currentView = ViewMode.NONE;
            listView.setVisible(false);
            editField.setVisible(false);
            deleteBtn.setVisible(false);
            updateBtn.setVisible(false);
            backBtn.setVisible(false);
            listView.getItems().clear();
            editField.clear();
        });

        logoutBtn.setOnAction(e -> {
            primaryStage.close();
            try {
                new LoginScreen().start(new Stage());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });

        deleteBtn.setOnAction(e -> {
            if (currentView == ViewMode.APPOINTMENTS) {
                deleteSelectedAppointment();
            } else if (currentView == ViewMode.FEEDBACK) {
                deleteSelectedFeedback();
            }
        });

        updateBtn.setOnAction(e -> {
            if (currentView == ViewMode.APPOINTMENTS) {
                updateSelectedAppointment();
            } else if (currentView == ViewMode.FEEDBACK) {
                // No update for feedback, do nothing
            }
        });

        listView.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            editField.setText(newVal != null ? newVal : "");
        });

        Scene scene = new Scene(root, 500, 500);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void showAppointmentsView() {
        currentView = ViewMode.APPOINTMENTS;
        listView.setItems(appointments);
        listView.setVisible(true);
        editField.setVisible(true);
        deleteBtn.setVisible(true);
        updateBtn.setVisible(true);
        backBtn.setVisible(true);
        editField.clear();
    }

    private void showFeedbackView() {
        currentView = ViewMode.FEEDBACK;
        listView.setItems(feedbacks);
        listView.setVisible(true);
        editField.setVisible(true);
        deleteBtn.setVisible(true);
        updateBtn.setVisible(false);  
        backBtn.setVisible(true);
        editField.clear();
    }

    private void loadAppointments() {
        appointments.clear();
        try {
            if (!Files.exists(Paths.get(APPOINTMENTS_FILE))) {
                Files.createFile(Paths.get(APPOINTMENTS_FILE));
            }
            List<String> lines = Files.readAllLines(Paths.get(APPOINTMENTS_FILE));
            appointments.addAll(lines);
        } catch (IOException e) {
            showAlert("Error", "Failed to load appointments");
        }
    }

    private void loadFeedback() {
        feedbacks.clear();
        try {
            if (!Files.exists(Paths.get(FEEDBACK_FILE))) {
                Files.createFile(Paths.get(FEEDBACK_FILE));
            }
            List<String> lines = Files.readAllLines(Paths.get(FEEDBACK_FILE));
            feedbacks.addAll(lines);
        } catch (IOException e) {
            showAlert("Error", "Failed to load feedback");
        }
    }

    private void deleteSelectedAppointment() {
        int selectedIndex = listView.getSelectionModel().getSelectedIndex();
        if (selectedIndex >= 0) {
            appointments.remove(selectedIndex);
            saveAppointments();
            editField.clear();
        } else {
            showAlert("Selection Error", "Please select an appointment to delete.");
        }
    }

    private void updateSelectedAppointment() {
        int selectedIndex = listView.getSelectionModel().getSelectedIndex();
        String newText = editField.getText().trim();
        if (selectedIndex >= 0 && !newText.isEmpty()) {
            appointments.set(selectedIndex, newText);
            saveAppointments();
        } else {
            showAlert("Input Error", "Select an appointment and enter valid text to update.");
        }
    }

    private void deleteSelectedFeedback() {
        int selectedIndex = listView.getSelectionModel().getSelectedIndex();
        if (selectedIndex >= 0) {
            feedbacks.remove(selectedIndex);
            saveFeedback();
            editField.clear();
        } else {
            showAlert("Selection Error", "Please select a feedback entry to delete.");
        }
    }

    private void saveAppointments() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(APPOINTMENTS_FILE))) {
            for (String appointment : appointments) {
                writer.write(appointment);
                writer.newLine();
            }
        } catch (IOException e) {
            showAlert("Error", "Failed to save appointments.");
        }
    }

    private void saveFeedback() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FEEDBACK_FILE))) {
            for (String fb : feedbacks) {
                writer.write(fb);
                writer.newLine();
            }
        } catch (IOException e) {
            showAlert("Error", "Failed to save feedback.");
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        
        setStaffId(staffId);
        launch(args);
    }
}
